//
//  ListAirportsViewController.swift
//  AlboAeroTestSZ
//
//  Created by Sergio Eduardo Zorrilla Arellano on 07/06/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation

protocol ListAirportsDisplayInterface: AnyObject {
    func displayListAirports(viewModel: ListAirportsModels.FetchListAirports.ViewModel)
    func displayListAirportsApi(viewModel: ListAirportsModels.FetchAirportsList.ViewModel)
}

class ListAirportsViewController: UIViewController {
    
    // MARK: - Properties
    
    var interactor: ListAirportsInteractorInterface?
    var router: (ListAirportsRouterInterface & ListAirportsDataPassing)?
    var airportsList = [AirportModel]()

    @IBOutlet weak var airportsTableView: UITableView!

    // MARK: - Init

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setupVIPCycle()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setupVIPCycle()
    }
    
    // MARK: - Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupAccessibilityIdentifers()
        
        performRequest()
    }
    
    // MARK: - Setup
    
    private func setupVIPCycle() {
        let viewController = self
        let interactor = ListAirportsInteractor()
        let presenter = ListAirportsPresenter()
        let router = ListAirportsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupUI() {
        airportsTableView.delegate = self
        airportsTableView.rowHeight = UITableView.automaticDimension
        airportsTableView.estimatedRowHeight = UITableView.automaticDimension
        airportsTableView.tableFooterView = UIView()
    }
    
    private func setupAccessibilityIdentifers() {
    
    }
    
    // MARK: - Helpers
    
    func performRequest() {
        let request = ListAirportsModels.FetchListAirports.Request()
        interactor?.fetchListAirports(request: request)
    }
}


// MARK: - ListAirportsDisplayLogic

extension ListAirportsViewController: ListAirportsDisplayInterface {

    func displayListAirports(viewModel: ListAirportsModels.FetchListAirports.ViewModel) {
        let request = MapAirportsModels.FetchAirportsMap.Request(coordinates: viewModel.coordinates,
                                                                   radiusKm: viewModel.radiusKm)
        interactor?.getListAirports(request: request)
    }

    func displayListAirportsApi(viewModel: ListAirportsModels.FetchAirportsList.ViewModel) {
        if viewModel.airports?.items?.count ?? 0 > 0 {
            DispatchQueue.main.async {
                self.airportsList = viewModel.airports?.items ?? self.airportsList
                self.airportsTableView.tableFooterView = UIView()
                self.airportsTableView.reloadData()
            }
        }
    }
}

// MARK: - UITableViewDelegate
extension ListAirportsViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.airportsList.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: ListAirportTableViewCell.cellIdentifier, for: indexPath) as? ListAirportTableViewCell else {
            return UITableViewCell()
        }
        cell.airport = self.airportsList[indexPath.row]
        return cell
    }
}

// MARK: - UITableViewDelegate
extension ListAirportsViewController: UITableViewDelegate {

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }

    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}
