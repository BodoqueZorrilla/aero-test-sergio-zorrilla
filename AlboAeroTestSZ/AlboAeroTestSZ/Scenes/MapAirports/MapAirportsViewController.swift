//
//  MapAirportsViewController.swift
//  AlboAeroTestSZ
//
//  Created by Sergio Eduardo Zorrilla Arellano on 07/06/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

protocol MapAirportsDisplayInterface: AnyObject {
    func displayMapAirports(viewModel: MapAirportsModels.FetchMapAirports.ViewModel)
    func displayMapAirportsApi(viewModel: MapAirportsModels.FetchAirportsMap.ViewModel)
}

class MapAirportsViewController: UIViewController {
    
    // MARK: - Properties
    
    var interactor: MapAirportsInteractorInterface?
    var router: (MapAirportsRouterInterface & MapAirportsDataPassing)?
    
    @IBOutlet weak var mapView: MKMapView!

    // MARK: - Init

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setupVIPCycle()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setupVIPCycle()
    }
    
    // MARK: - Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupAccessibilityIdentifers()
        
        performRequest()
    }
    
    // MARK: - Setup
    
    private func setupVIPCycle() {
        let viewController = self
        let interactor = MapAirportsInteractor()
        let presenter = MapAirportsPresenter()
        let router = MapAirportsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupUI() {
        
    }
    
    private func setupAccessibilityIdentifers() {
    
    }
    
    // MARK: - Helpers
    
    func performRequest() {
        let request = MapAirportsModels.FetchMapAirports.Request()
        interactor?.fetchMapAirports(request: request)
    }
}


// MARK: - MapAirportsDisplayLogic

extension MapAirportsViewController: MapAirportsDisplayInterface {

    func displayMapAirports(viewModel: MapAirportsModels.FetchMapAirports.ViewModel) {
        let initialLocation = CLLocation(latitude: viewModel.coordinates.latitude,
                                         longitude: viewModel.coordinates.longitude)
        
        let coordinateRegion = MKCoordinateRegion.init(center: initialLocation.coordinate,
                                                       latitudinalMeters: 5000,
                                                       longitudinalMeters: 5000)
        self.mapView.setRegion(coordinateRegion, animated: true)
        self.mapView.showsUserLocation = true
        let request = MapAirportsModels.FetchAirportsMap.Request(coordinates: viewModel.coordinates,
                                                                 radiusKm: viewModel.radiusKm)
        interactor?.getMapAirports(request: request)
    }

    func displayMapAirportsApi(viewModel: MapAirportsModels.FetchAirportsMap.ViewModel) {
        if viewModel.airports?.items?.count ?? 0 > 0 {
            for airport in viewModel.airports?.items ?? [] {
                let annotation = MKPointAnnotation()
                annotation.title = airport.name
                
                annotation.coordinate = CLLocationCoordinate2D(latitude: airport.location?.lat ?? 0.0,
                                                               longitude: airport.location?.lon ?? 0.0)
                DispatchQueue.main.async {
                    self.mapView.addAnnotation(annotation)
                }
            }
        }
    }
}
